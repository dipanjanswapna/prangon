/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, focusing on authenticated access and preventing unauthorized data manipulation.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, accessible only by the owning user.
 * - Top-level collections (e.g., `/projects`, `/achievements`, `/blogPosts`) are publicly readable.
 * - Write access to top-level collections is restricted and potentially requires an 'authorId' field to match the authenticated user's ID.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is minimal, focusing on authorization-critical fields.
 * - Public read access is granted to most top-level collections.
 * - Missing ownership fields on top-level collections will result in a "TODO" comment, indicating a required schema update.
 *
 * Denormalization for Authorization:
 *  To avoid costly `get()` operations, an `authorId` field should exist in documents in the root collections to store the user id of the user that created the document.
 *
 * Structural Segregation:
 * The application uses separate collections for public data (top-level collections) and private user data (`/users/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource, and that the resource exists.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get,update,delete) Signed-in user can get, update, and delete their own profile.
     * @deny (create) Signed-in user cannot create a profile with a different user ID.
     * @deny (get,update,delete) Signed-in user cannot get, update, and delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for projects collection.
     * @path /projects
     * @allow (get, list) Any user can read the list of projects.
     * @deny (create,update,delete) No user can create, update, or delete projects without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Project' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for achievements collection.
     * @path /achievements
     * @allow (get, list) Any user can read the list of achievements.
     * @deny (create,update,delete) No user can create, update, or delete achievements without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Achievement' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for experiences collection.
     * @path /experiences
     * @allow (get, list) Any user can read the list of experiences.
     * @deny (create,update,delete) No user can create, update, or delete experiences without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /experiences/{experienceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Experience' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for blogPosts collection.
     * @path /blogPosts
     * @allow (get, list) Any user can read the list of blog posts.
     * @deny (create,update,delete) No user can create, update, or delete blog posts without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /blogPosts/{blogPostId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'BlogPost' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for prangonsLikha collection.
     * @path /prangonsLikha
     * @allow (get, list) Any user can read the list of prangons likha posts.
     * @deny (create,update,delete) No user can create, update, or delete prangons likha posts without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /prangonsLikha/{prangonsLikhaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'PrangonsLikhaPost' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for libraryItems collection.
     * @path /libraryItems
     * @allow (get, list) Any user can read the list of library items.
     * @deny (create,update,delete) No user can create, update, or delete library items without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /libraryItems/{libraryItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'LibraryItem' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for subscriptionPlans collection.
     * @path /subscriptionPlans
     * @allow (get, list) Any user can read the list of subscription plans.
     * @deny (create,update,delete) No user can create, update, or delete subscription plans without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /subscriptionPlans/{subscriptionPlanId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'SubscriptionPlan' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for visualArts collection.
     * @path /visualArts
     * @allow (get, list) Any user can read the list of visual arts.
     * @deny (create,update,delete) No user can create, update, or delete visual arts without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /visualArts/{visualArtId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'VisualArt' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for socialWorkInitiatives collection.
     * @path /socialWorkInitiatives
     * @allow (get, list) Any user can read the list of social work initiatives.
     * @deny (create,update,delete) No user can create, update, or delete social work initiatives without being the owner. The schema is missing an owner field.
     * @principle Public read access with restricted writes based on ownership.
     */
    match /socialWorkInitiatives/{socialWorkInitiativeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'SocialWorkInitiative' entity is missing an 'ownerId' or 'authorId' field.
    }
  }
}