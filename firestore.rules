/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with public read access where applicable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /projects: Publicly readable, but only admins can create, update, or delete projects.
 * - /achievements: Publicly readable, but only admins can create, update, or delete achievements.
 * - /experiences: Publicly readable, but only admins can create, update, or delete experiences.
 * - /blogPosts: Publicly readable, but only admins can create, update, or delete blog posts.
 * - /prangonsLikha: Publicly readable, but only admins can create, update, or delete posts.
 * - /libraryItems: Publicly readable, but only admins can create, update, or delete library items.
 * - /subscriptionPlans: Publicly readable, but only admins can create, update, or delete subscription plans.
 * - /visualArts: Publicly readable, but only admins can create, update, or delete visual arts.
 * - /socialWorkInitiatives: Publicly readable, but only admins can create, update, or delete initiatives.
 *
 * Key Security Decisions:
 * - User data is private and only accessible by the user themselves and admins.
 * - Public read access is granted to Projects, Achievements, Experiences, BlogPosts, PrangonsLikha, LibraryItems, SubscriptionPlans, VisualArts, and SocialWorkInitiatives to facilitate public consumption.
 * - Only admins can create, update, or delete Projects, Achievements, Experiences, BlogPosts, PrangonsLikha, LibraryItems, SubscriptionPlans, VisualArts, and SocialWorkInitiatives.
 *
 * Denormalization for Authorization:
 * - User profiles contain a 'role' field that determines administrative privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId} can read their own profile. Admin can read all profiles.
     * @allow (create) User can create their own profile if the uid matches.
     * @allow (update, delete) User with matching {userId} can update/delete their own profile. Admin can update/delete all profiles.
     * @deny (get, list) User cannot read other user profiles.
     * @deny (create) User cannot create a profile with a mismatched uid.
     * @deny (update, delete) User cannot update/delete other user profiles.
     * @principle Enforces user-ownership for profile data and allows admin override.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
    }

    /**
     * @description Controls access to project documents.
     * @path /projects
     * @allow (get, list) Any user can read the list of projects and specific project.
     * @allow (create, update, delete) Only admins can create, update, or delete projects.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete projects.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /projects/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to achievement documents.
     * @path /achievements
     * @allow (get, list) Any user can read the list of achievements and a specific achievement.
     * @allow (create, update, delete) Only admins can create, update, or delete achievements.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete achievements.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /achievements/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to experience documents.
     * @path /experiences
     * @allow (get, list) Any user can read the list of experiences and a specific experience.
     * @allow (create, update, delete) Only admins can create, update, or delete experiences.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete experiences.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /experiences/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to blog post documents.
     * @path /blogPosts
     * @allow (get, list) Any user can read the list of blog posts and a specific blog post.
     * @allow (create, update, delete) Only admins can create, update, or delete blog posts.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete blog posts.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /blogPosts/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to Prangons Likha post documents.
     * @path /prangonsLikha
     * @allow (get, list) Any user can read the list of Prangons Likha posts and a specific post.
     * @allow (create, update, delete) Only admins can create, update, or delete posts.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete posts.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /prangonsLikha/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to library item documents.
     * @path /libraryItems
     * @allow (get, list) Any user can read the list of library items and a specific item.
     * @allow (create, update, delete) Only admins can create, update, or delete library items.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete library items.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /libraryItems/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to subscription plan documents.
     * @path /subscriptionPlans
     * @allow (get, list) Any user can read the list of subscription plans and a specific plan.
     * @allow (create, update, delete) Only admins can create, update, or delete subscription plans.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete subscription plans.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /subscriptionPlans/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to visual art documents.
     * @path /visualArts
     * @allow (get, list) Any user can read the list of visual art pieces and a specific piece.
     * @allow (create, update, delete) Only admins can create, update, or delete visual art pieces.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete visual art pieces.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /visualArts/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to social work initiative documents.
     * @path /socialWorkInitiatives
     * @allow (get, list) Any user can read the list of social work initiatives and a specific initiative.
     * @allow (create, update, delete) Only admins can create, update, or delete social work initiatives.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete social work initiatives.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /socialWorkInitiatives/{document} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}