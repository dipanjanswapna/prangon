rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user
     *              can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create, get, list, update, delete) - Any other user tries to access this profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to all projects. Only authenticated users can
     *              create, update, or delete projects.
     * @path /projects
     * @allow (get, list) - Any user can read the projects.
     * @allow (create) - Authenticated user creates a new project.
     * @allow (update, delete) - Authenticated user updates or deletes a project.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify project data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /projects/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all achievements. Only authenticated users can
     *              create, update, or delete achievements.
     * @path /achievements
     * @allow (get, list) - Any user can read the achievements.
     * @allow (create) - Authenticated user creates a new achievement.
     * @allow (update, delete) - Authenticated user updates or deletes an achievement.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify achievement data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /achievements/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all experiences. Only authenticated users can
     *              create, update, or delete experiences.
     * @path /experiences
     * @allow (get, list) - Any user can read the experiences.
     * @allow (create) - Authenticated user creates a new experience.
     * @allow (update, delete) - Authenticated user updates or deletes an experience.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify experience data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /experiences/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

   /**
    * @description Allows public read access to all blog posts. Only authenticated users can
    *              create, update, or delete blog posts.
    * @path /blogPosts
    * @allow (get, list) - Any user can read the blog posts.
    * @allow (create) - Authenticated user creates a new blog post.
    * @allow (update, delete) - Authenticated user updates or deletes a blog post.
    * @deny (create, update, delete) - Unauthenticated user attempts to modify blog post data.
    * @principle Public read access with authenticated-user-only writes.
    */
    match /blogPosts/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all Prangons Likha posts. Only authenticated users can
     *              create, update, or delete these posts.
     * @path /prangonsLikha
     * @allow (get, list) - Any user can read the Prangons Likha posts.
     * @allow (create) - Authenticated user creates a new Prangons Likha post.
     * @allow (update, delete) - Authenticated user updates or deletes a Prangons Likha post.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify Prangons Likha post data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /prangonsLikha/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all library items. Only authenticated users can
     *              create, update, or delete these items.
     * @path /libraryItems
     * @allow (get, list) - Any user can read the library items.
     * @allow (create) - Authenticated user creates a new library item.
     * @allow (update, delete) - Authenticated user updates or deletes a library item.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify library item data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /libraryItems/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all subscription plans. Only authenticated users can
     *              create, update, or delete these plans.
     * @path /subscriptionPlans
     * @allow (get, list) - Any user can read the subscription plans.
     * @allow (create) - Authenticated user creates a new subscription plan.
     * @allow (update, delete) - Authenticated user updates or deletes a subscription plan.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify subscription plan data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /subscriptionPlans/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all visual arts. Only authenticated users can
     *              create, update, or delete these art pieces.
     * @path /visualArts
     * @allow (get, list) - Any user can read the visual arts.
     * @allow (create) - Authenticated user creates a new visual art piece.
     * @allow (update, delete) - Authenticated user updates or deletes a visual art piece.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify visual art data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /visualArts/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to all social work initiatives. Only authenticated users can
     *              create, update, or delete these initiatives.
     * @path /socialWorkInitiatives
     * @allow (get, list) - Any user can read the social work initiatives.
     * @allow (create) - Authenticated user creates a new social work initiative.
     * @allow (update, delete) - Authenticated user updates or deletes a social work initiative.
     * @deny (create, update, delete) - Unauthenticated user attempts to modify social work initiative data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /socialWorkInitiatives/{document} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}